{"remainingRequest":"/Users/bauerhs/git/report-exporter/clientui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bauerhs/git/report-exporter/clientui/node_modules/@voerro/vue-tagsinput/src/VoerroTagsInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/@voerro/vue-tagsinput/src/VoerroTagsInput.vue","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["VoerroTagsInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VoerroTagsInput.vue","sourceRoot":"node_modules/@voerro/vue-tagsinput/src","sourcesContent":["<template>\n    <div class=\"tags-input-root\" style=\"position: relative;\">\n        <div :class=\"{\n            [wrapperClass + ' tags-input']: true,\n            'active': isActive,\n        }\">\n            <span class=\"tags-input-badge tags-input-badge-pill tags-input-badge-selected-default\"\n                v-for=\"(tag, index) in tags\"\n                :key=\"index\"\n            >\n                <span v-html=\"tag.value\"></span>\n\n                <a href=\"#\"\n                    class=\"tags-input-remove\"\n                    @click.prevent=\"removeTag(index)\"></a>\n            </span>\n\n            <input type=\"text\"\n                ref=\"taginput\"\n                :placeholder=\"placeholder\"\n                v-model=\"input\"\n                v-show=\"!hideInputField\"\n                @keydown.enter.prevent=\"tagFromInput(false)\"\n                @keydown.8=\"removeLastTag\"\n                @keydown.down=\"nextSearchResult\"\n                @keydown.up=\"prevSearchResult\"\n                @keydown=\"onKeyDown\"\n                @keyup=\"onKeyUp\"\n                @keyup.esc=\"clearSearchResults\"\n                @focus=\"onFocus\"\n                @click=\"onClick\"\n                @blur=\"onBlur\"\n                @value=\"tags\">\n\n            <input type=\"hidden\" v-if=\"elementId\"\n                :name=\"elementId\"\n                :id=\"elementId\"\n                v-model=\"hiddenInput\">\n        </div>\n\n        <!-- Typeahead/Autocomplete -->\n        <div v-show=\"searchResults.length\">\n            <p v-if=\"typeaheadStyle === 'badges'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <span v-if=\"!typeaheadHideDiscard\" class=\"tags-input-badge typeahead-hide-btn tags-input-typeahead-item-default\"\n                    @click.prevent=\"clearSearchResults(true)\"\n                    v-text=\"discardSearchText\"></span>\n\n                <span v-for=\"(tag, index) in searchResults\"\n                    :key=\"index\"\n                    v-html=\"tag.value\"\n                    @mouseover=\"searchSelection = index\"\n                    @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                    class=\"tags-input-badge\"\n                    v-bind:class=\"{\n                        'tags-input-typeahead-item-default': index != searchSelection,\n                        'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                    }\"></span>\n            </p>\n\n            <ul v-else-if=\"typeaheadStyle === 'dropdown'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <li v-if=\"!typeaheadHideDiscard\" class=\"tags-input-typeahead-item-default typeahead-hide-btn\"\n                    @click.prevent=\"clearSearchResults(true)\"\n                    v-text=\"discardSearchText\"></li>\n\n                <li v-for=\"(tag, index) in searchResults\"\n                :key=\"index\"\n                v-html=\"tag.value\"\n                @mouseover=\"searchSelection = index\"\n                @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                v-bind:class=\"{\n                    'tags-input-typeahead-item-default': index != searchSelection,\n                    'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                }\"></li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        elementId: String,\n\n        existingTags: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        value: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        typeahead: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadStyle: {\n            type: String,\n            default: 'badges'\n        },\n\n        typeaheadActivationThreshold: {\n            type: Number,\n            default: 1\n        },\n\n        typeaheadMaxResults: {\n            type: Number,\n            default: 0\n        },\n\n        typeaheadAlwaysShow: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadShowOnFocus: {\n            type: Boolean,\n            default: true\n        },\n\n        typeaheadHideDiscard: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadUrl: {\n            type: String,\n            default: ''\n        },\n\n        placeholder: {\n            type: String,\n            default: 'Add a tag'\n        },\n        \n        discardSearchText: {\n            type: String,\n            default: 'Discard Search Results'\n        },\n\n        limit: {\n            type: Number,\n            default: 0\n        },\n\n        hideInputOnLimit: {\n            type: Boolean,\n            default: false\n        },\n\n        onlyExistingTags: {\n            type: Boolean,\n            default: false\n        },\n\n        deleteOnBackspace: {\n            type: Boolean,\n            default: true\n        },\n\n        allowDuplicates: {\n            type: Boolean,\n            default: false\n        },\n        \n        validate: {\n            type: Function,\n            default: () => true\n        },\n\n        addTagsOnComma: {\n            type: Boolean,\n            default: false\n        },\n\n        addTagsOnSpace: {\n            type: Boolean,\n            default: false\n        },\n\n        addTagsOnBlur: {\n            type: Boolean,\n            default: false\n        },\n\n        wrapperClass: {\n            type: String,\n            default: 'tags-input-wrapper-default'\n        },\n\n        sortSearchResults: {\n            type: Boolean,\n            default: true\n        },\n\n        caseSensitiveTags: {\n            type: Boolean,\n            default: false\n        },\n\n        beforeAddingTag: {\n            type: Function,\n            default: () => true\n        },\n\n        beforeRemovingTag: {\n            type: Function,\n            default: () => true\n        },\n    },\n\n    data() {\n        return {\n            badgeId: 0,\n            tags: [],\n\n            input: '',\n            oldInput: '',\n            hiddenInput: '',\n\n            searchResults: [],\n            searchSelection: 0,\n\n            selectedTag: -1,\n\n            isActive: false,\n        };\n    },\n\n    created () {\n        this.tagsFromValue();\n\n        if (this.typeaheadAlwaysShow) {\n            this.searchTag(false);\n        }\n    },\n\n    mounted () {\n        // Emit an event\n        this.$emit('initialized');\n        \n        document.addEventListener('click', (e) => {\n            if (e.target !== this.$refs['taginput']) {\n                this.clearSearchResults();\n            }\n        });\n    },\n\n    computed: {\n        hideInputField() {\n            return (this.hideInputOnLimit && this.limit > 0 && this.tags.length >= this.limit);\n        }\n    },\n\n    watch: {\n        input(newVal, oldVal) {\n            this.searchTag(false);\n\n            if (newVal.length && newVal != oldVal) {\n                const diff = newVal.substring(oldVal.length, newVal.length);\n\n                if (this.addTagsOnSpace) {\n                    if (newVal.endsWith(' ')) {\n                        // The space shouldn't actually be inserted\n                        this.input = newVal.trim();\n\n                        // Add the inputed tag\n                        this.tagFromInput(true);\n                    }\n                }\n\n                if (this.addTagsOnComma) {\n                    newVal = newVal.trim();\n\n                    if (newVal.endsWith(',')) {\n                        // The comma shouldn't actually be inserted\n                        this.input = newVal.substring(0, newVal.length - 1);\n\n                        // Add the inputed tag\n                        this.tagFromInput(true);\n                    }\n                }\n\n                this.$emit('change', newVal);\n            }\n        },\n\n        tags() {\n            // Updating the hidden input\n            this.hiddenInput = JSON.stringify(this.tags);\n\n            // Update the bound v-model value\n            this.$emit('input', this.tags);\n        },\n\n        value() {\n            this.tagsFromValue();\n        },\n\n        typeaheadAlwaysShow(newValue) {\n            if (newValue) {\n                this.searchTag(false);\n            } else {\n                this.clearSearchResults();\n            }\n        },\n    },\n\n    methods: {\n        /**\n         * Remove reserved regex characters from a string so that they don't\n         * affect search results\n         * \n         * @param string\n         * @returns String\n         */\n        escapeRegExp(string) {\n            return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        },\n\n        /**\n         * Add a tag whether from user input or from search results (typeahead)\n         * \n         * @param ignoreSearchResults\n         * @returns void\n         */\n        tagFromInput(ignoreSearchResults = false) {\n            // If we're choosing a tag from the search results\n            if (this.searchResults.length && this.searchSelection >= 0 && !ignoreSearchResults) {\n                this.tagFromSearch(this.searchResults[this.searchSelection]);\n\n                this.input = '';\n            } else {\n                // If we're adding an unexisting tag\n                let text = this.input.trim();\n\n                // If the new tag is not an empty string and passes validation\n                if (!this.onlyExistingTags && text.length && this.validate(text)) {\n                    this.input = '';\n\n                    // Determine if the inputted tag exists in the existingTags\n                    // array\n                    let newTag = {\n                        key: '',\n                        value: text,\n                    };\n\n                    const searchQuery = this.escapeRegExp(\n                        this.caseSensitiveTags\n                            ? newTag.value\n                            : newTag.value.toLowerCase()\n                    );\n\n                    for (let tag of this.existingTags) {\n                        const compareable = this.caseSensitiveTags\n                            ? tag.value\n                            : tag.value.toLowerCase();\n\n                        if (searchQuery === compareable) {\n                            newTag = Object.assign({}, tag);\n\n                            break;\n                        }\n                    }\n\n                    this.addTag(newTag);\n                }\n            }\n        },\n\n        /**\n         * Add a tag from search results when a user clicks on it\n         * \n         * @param tag\n         * @returns void\n         */\n        tagFromSearchOnClick(tag) {\n            this.tagFromSearch(tag);\n\n            this.$refs['taginput'].blur();\n        },\n\n        /**\n         * Add the selected tag from the search results.\n         * Clear search results.\n         * Clear user input.\n         * \n         * @param tag\n         * @return void\n         */\n        tagFromSearch(tag) {\n            this.clearSearchResults();\n            this.addTag(tag);\n\n            this.$nextTick(() => {\n                this.input = '';\n                this.oldInput = '';\n            });\n        },\n\n        /**\n         * Add/Select a tag\n         * \n         * @param tag\n         * @returns void | Boolean\n         */\n        addTag(tag) {\n            if (!this.beforeAddingTag(tag)) {\n                return false;\n            }\n\n            // Check if the limit has been reached\n            if (this.limit > 0 && this.tags.length >= this.limit) {\n                this.$emit('limit-reached');\n\n                return false;\n            }\n\n            // Attach the tag if it hasn't been attached yet\n            if (!this.tagSelected(tag)) {\n                this.tags.push(tag);\n\n                // Emit events\n                this.$nextTick(() => {\n                    this.$emit('tag-added', tag);\n                    this.$emit('tags-updated');\n                });\n            }\n        },\n\n        /**\n         * Remove the last tag in the tags array.\n         * \n         * @returns void\n         */\n        removeLastTag() {\n            if (!this.input.length && this.deleteOnBackspace && this.tags.length) {\n                this.removeTag(this.tags.length - 1);\n            }\n        },\n\n        /**\n         * Remove the selected tag at the specified index.\n         * \n         * @param index\n         * @returns void\n         */\n        removeTag(index) {\n            let tag = this.tags[index];\n\n            if (!this.beforeRemovingTag(tag)) {\n                return false;\n            }\n\n            this.tags.splice(index, 1);\n\n            // Emit events\n            this.$nextTick(() => {\n                this.$emit('tag-removed', tag);\n                this.$emit('tags-updated');\n\n                if (this.typeaheadAlwaysShow) {\n                    this.searchTag();\n                }\n            });\n        },\n\n        /**\n         * Search the currently entered text in the list of existing tags\n         * \n         * @returns void | Boolean\n         */\n        searchTag() {\n            if (this.typeahead !== true) {\n                return false;\n            }\n\n            if (this.oldInput != this.input || (!this.searchResults.length && this.typeaheadActivationThreshold == 0) || this.typeaheadAlwaysShow || this.typeaheadShowOnFocus) {\n                this.searchResults = [];\n                this.searchSelection = 0;\n                let input = this.input.trim();\n\n                if ((input.length && input.length >= this.typeaheadActivationThreshold) || this.typeaheadActivationThreshold == 0 || this.typeaheadAlwaysShow) {\n                    // Find all the existing tags which include the search text\n                    const searchQuery = this.escapeRegExp(\n                        this.caseSensitiveTags ? input : input.toLowerCase()\n                    );\n\n                    // AJAX search\n                    if (this.typeaheadUrl.length > 0) {\n                        this.existingTags.splice();\n                        const xhttp = new XMLHttpRequest();\n                        const that = this;\n\n                        xhttp.onreadystatechange = function () {\n                            if (this.readyState == 4 && this.status == 200) {\n                                that.existingTags = JSON.parse(xhttp.responseText);\n\n                                that.doSearch(searchQuery);\n                            }\n                        }\n\n                        const endpoint = this.typeaheadUrl.replace(':search', searchQuery);\n                        xhttp.open('GET', endpoint, true);\n                        xhttp.send();\n                    } else {\n                        // Search the existing collection\n                        this.doSearch(searchQuery);\n                    }\n                }\n\n                this.oldInput = this.input;\n            }\n        },\n\n        /**\n         * Perform the actual search\n         * \n         * @param string searchQuery\n         * @return void\n         */\n        doSearch(searchQuery) {\n            for (let tag of this.existingTags) {\n                const compareable = this.caseSensitiveTags\n                    ? tag.value\n                    : tag.value.toLowerCase();\n\n                if (compareable.search(searchQuery) > -1 && ! this.tagSelected(tag)) {\n                    this.searchResults.push(tag);\n                }\n            }\n\n            // Sort the search results alphabetically\n            if (this.sortSearchResults) {\n                this.searchResults.sort((a, b) => {\n                    if (a.value < b.value) return -1;\n                    if (a.value > b.value) return 1;\n\n                    return 0;\n                });\n            }\n\n            // Shorten Search results to desired length\n            if (this.typeaheadMaxResults > 0) {\n                this.searchResults = this.searchResults.slice(\n                    0,\n                    this.typeaheadMaxResults\n                );\n            }\n        },\n\n        /**\n         * Hide the typeahead if there's nothing intered into the input field.\n         * \n         * @returns void\n         */\n        hideTypeahead() {\n            if (! this.input.length) {\n                this.$nextTick(() => {\n                    this.clearSearchResults();\n                });\n            }\n        },\n\n        /**\n         * Select the next search result in typeahead.\n         * \n         * @returns void\n         */\n        nextSearchResult() {\n            if (this.searchSelection + 1 <= this.searchResults.length - 1) {\n                this.searchSelection++;\n            }\n        },\n\n        /**\n         * Select the previous search result in typeahead.\n         * \n         * @returns void\n         */\n        prevSearchResult() {\n            if (this.searchSelection > 0) {\n                this.searchSelection--;\n            }\n        },\n\n        /**\n         * Clear/Empty the search results.\n         * \n         * @reutrns void\n         */\n        clearSearchResults(returnFocus = false) {\n            this.searchResults = [];\n            this.searchSelection = 0;\n\n            if (this.typeaheadAlwaysShow) {\n                this.$nextTick(() => {\n                    this.searchTag();\n                });\n            }\n\n            if (returnFocus) {\n                this.$refs['taginput'].focus();\n            }\n        },\n\n        /**\n         * Clear the list of selected tags.\n         * \n         * @returns void\n         */\n        clearTags() {\n            this.tags.splice(0, this.tags.length);\n        },\n\n        /**\n         * Replace the currently selected tags with the tags from the value.\n         * \n         * @returns void\n         */\n        tagsFromValue() {\n            if (this.value && this.value.length) {\n                if (!Array.isArray(this.value)) {\n                    console.error('Voerro Tags Input: the v-model value must be an array!');\n\n                    return;\n                }\n                \n                let tags = this.value;\n\n                // Don't update if nothing has changed\n                if (this.tags == tags) {\n                    return;\n                }\n\n                this.clearTags();\n\n                for (let tag of tags) {\n                    this.addTag(tag);\n                }\n            } else {\n                if (this.tags.length == 0) {\n                    return;\n                }\n\n                this.clearTags();\n            }\n        },\n\n        /**\n         * Check if a tag is already selected.\n         * \n         * @param tag\n         * @returns Boolean\n         */\n        tagSelected(tag) {\n            if (this.allowDuplicates) {\n                return false;\n            }\n\n            if (! tag) {\n                return false;\n            }\n\n            const searchQuery = this.escapeRegExp(\n                this.caseSensitiveTags ? tag.value : tag.value.toLowerCase()\n            );\n\n            for (let selectedTag of this.tags) {\n                const compareable = this.caseSensitiveTags\n                    ? selectedTag.value\n                    : selectedTag.value.toLowerCase();\n\n                if (selectedTag.key === tag.key && this.escapeRegExp(compareable).length == searchQuery.length && compareable.search(searchQuery) > -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Clear the input.\n         * \n         * @returns void\n         */\n        clearInput() {\n            this.input = '';\n        },\n\n        /**\n         * Process all the keyup events.\n         * \n         * @param e\n         * @returns void\n         */\n        onKeyUp(e) {\n            this.$emit('keyup', e);\n        },\n\n        /**\n         * Process all the keydown events.\n         * \n         * @param e\n         * @returns void\n         */\n        onKeyDown(e) {\n            this.$emit('keydown', e);\n        },\n\n        /**\n         * Process the onfocus event.\n         * \n         * @param e\n         * @returns void\n         */\n        onFocus(e) {\n            this.$emit('focus', e);\n\n            this.isActive = true;\n        },\n\n        /**\n         * Process the onClick event.\n         * \n         * @param e\n         * @returns void\n         */\n        onClick(e) {\n            this.$emit('click', e);\n\n            this.isActive = true;\n\n            this.searchTag();\n        },\n\n        /**\n         * Process the onblur event.\n         * \n         * @param e\n         * @returns void\n         */\n        onBlur(e) {\n            this.$emit('blur', e)\n\n            if (this.addTagsOnBlur) {\n                // Add the inputed tag\n                this.tagFromInput(true);\n            }\n\n            if (!this.typeaheadAlwaysShow) {\n                this.hideTypeahead();\n            } else {\n                this.searchTag();\n            }\n\n            this.isActive = false;\n        },\n    }\n}\n</script>\n"]}]}