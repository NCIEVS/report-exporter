{"remainingRequest":"/Users/bauerhs/git/report-exporter/clientui/node_modules/thread-loader/dist/cjs.js!/Users/bauerhs/git/report-exporter/clientui/node_modules/babel-loader/lib/index.js!/Users/bauerhs/git/report-exporter/clientui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/bauerhs/git/report-exporter/clientui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bauerhs/git/report-exporter/clientui/node_modules/@voerro/vue-tagsinput/src/VoerroTagsInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/@voerro/vue-tagsinput/src/VoerroTagsInput.vue","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bauerhs/git/report-exporter/clientui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciBmcm9tICIvVXNlcnMvYmF1ZXJocy9naXQvcmVwb3J0LWV4cG9ydGVyL2NsaWVudHVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBlbGVtZW50SWQ6IFN0cmluZywKICAgIGV4aXN0aW5nVGFnczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgdmFsdWU6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIHR5cGVhaGVhZDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHR5cGVhaGVhZFN0eWxlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ2JhZGdlcycKICAgIH0sCiAgICB0eXBlYWhlYWRBY3RpdmF0aW9uVGhyZXNob2xkOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMQogICAgfSwKICAgIHR5cGVhaGVhZE1heFJlc3VsdHM6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgdHlwZWFoZWFkQWx3YXlzU2hvdzogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHR5cGVhaGVhZFNob3dPbkZvY3VzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICB0eXBlYWhlYWRIaWRlRGlzY2FyZDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHR5cGVhaGVhZFVybDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAogICAgcGxhY2Vob2xkZXI6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnQWRkIGEgdGFnJwogICAgfSwKICAgIGRpc2NhcmRTZWFyY2hUZXh0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ0Rpc2NhcmQgU2VhcmNoIFJlc3VsdHMnCiAgICB9LAogICAgbGltaXQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgaGlkZUlucHV0T25MaW1pdDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIG9ubHlFeGlzdGluZ1RhZ3M6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBkZWxldGVPbkJhY2tzcGFjZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgYWxsb3dEdXBsaWNhdGVzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgdmFsaWRhdGU6IHsKICAgICAgdHlwZTogRnVuY3Rpb24sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9LAogICAgYWRkVGFnc09uQ29tbWE6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBhZGRUYWdzT25TcGFjZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGFkZFRhZ3NPbkJsdXI6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICB3cmFwcGVyQ2xhc3M6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAndGFncy1pbnB1dC13cmFwcGVyLWRlZmF1bHQnCiAgICB9LAogICAgc29ydFNlYXJjaFJlc3VsdHM6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIGNhc2VTZW5zaXRpdmVUYWdzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgYmVmb3JlQWRkaW5nVGFnOiB7CiAgICAgIHR5cGU6IEZ1bmN0aW9uLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIGJlZm9yZVJlbW92aW5nVGFnOiB7CiAgICAgIHR5cGU6IEZ1bmN0aW9uLAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGJhZGdlSWQ6IDAsCiAgICAgIHRhZ3M6IFtdLAogICAgICBpbnB1dDogJycsCiAgICAgIG9sZElucHV0OiAnJywKICAgICAgaGlkZGVuSW5wdXQ6ICcnLAogICAgICBzZWFyY2hSZXN1bHRzOiBbXSwKICAgICAgc2VhcmNoU2VsZWN0aW9uOiAwLAogICAgICBzZWxlY3RlZFRhZzogLTEsCiAgICAgIGlzQWN0aXZlOiBmYWxzZQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLnRhZ3NGcm9tVmFsdWUoKTsKCiAgICBpZiAodGhpcy50eXBlYWhlYWRBbHdheXNTaG93KSB7CiAgICAgIHRoaXMuc2VhcmNoVGFnKGZhbHNlKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIC8vIEVtaXQgYW4gZXZlbnQKICAgIHRoaXMuJGVtaXQoJ2luaXRpYWxpemVkJyk7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChlLnRhcmdldCAhPT0gX3RoaXMuJHJlZnNbJ3RhZ2lucHV0J10pIHsKICAgICAgICBfdGhpcy5jbGVhclNlYXJjaFJlc3VsdHMoKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBjb21wdXRlZDogewogICAgaGlkZUlucHV0RmllbGQ6IGZ1bmN0aW9uIGhpZGVJbnB1dEZpZWxkKCkgewogICAgICByZXR1cm4gdGhpcy5oaWRlSW5wdXRPbkxpbWl0ICYmIHRoaXMubGltaXQgPiAwICYmIHRoaXMudGFncy5sZW5ndGggPj0gdGhpcy5saW1pdDsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgdGhpcy5zZWFyY2hUYWcoZmFsc2UpOwoKICAgICAgaWYgKG5ld1ZhbC5sZW5ndGggJiYgbmV3VmFsICE9IG9sZFZhbCkgewogICAgICAgIHZhciBkaWZmID0gbmV3VmFsLnN1YnN0cmluZyhvbGRWYWwubGVuZ3RoLCBuZXdWYWwubGVuZ3RoKTsKCiAgICAgICAgaWYgKHRoaXMuYWRkVGFnc09uU3BhY2UpIHsKICAgICAgICAgIGlmIChuZXdWYWwuZW5kc1dpdGgoJyAnKSkgewogICAgICAgICAgICAvLyBUaGUgc3BhY2Ugc2hvdWxkbid0IGFjdHVhbGx5IGJlIGluc2VydGVkCiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBuZXdWYWwudHJpbSgpOyAvLyBBZGQgdGhlIGlucHV0ZWQgdGFnCgogICAgICAgICAgICB0aGlzLnRhZ0Zyb21JbnB1dCh0cnVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLmFkZFRhZ3NPbkNvbW1hKSB7CiAgICAgICAgICBuZXdWYWwgPSBuZXdWYWwudHJpbSgpOwoKICAgICAgICAgIGlmIChuZXdWYWwuZW5kc1dpdGgoJywnKSkgewogICAgICAgICAgICAvLyBUaGUgY29tbWEgc2hvdWxkbid0IGFjdHVhbGx5IGJlIGluc2VydGVkCiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBuZXdWYWwuc3Vic3RyaW5nKDAsIG5ld1ZhbC5sZW5ndGggLSAxKTsgLy8gQWRkIHRoZSBpbnB1dGVkIHRhZwoKICAgICAgICAgICAgdGhpcy50YWdGcm9tSW5wdXQodHJ1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCBuZXdWYWwpOwogICAgICB9CiAgICB9LAogICAgdGFnczogZnVuY3Rpb24gdGFncygpIHsKICAgICAgLy8gVXBkYXRpbmcgdGhlIGhpZGRlbiBpbnB1dAogICAgICB0aGlzLmhpZGRlbklucHV0ID0gSlNPTi5zdHJpbmdpZnkodGhpcy50YWdzKTsgLy8gVXBkYXRlIHRoZSBib3VuZCB2LW1vZGVsIHZhbHVlCgogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMudGFncyk7CiAgICB9LAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkgewogICAgICB0aGlzLnRhZ3NGcm9tVmFsdWUoKTsKICAgIH0sCiAgICB0eXBlYWhlYWRBbHdheXNTaG93OiBmdW5jdGlvbiB0eXBlYWhlYWRBbHdheXNTaG93KG5ld1ZhbHVlKSB7CiAgICAgIGlmIChuZXdWYWx1ZSkgewogICAgICAgIHRoaXMuc2VhcmNoVGFnKGZhbHNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNsZWFyU2VhcmNoUmVzdWx0cygpOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIFJlbW92ZSByZXNlcnZlZCByZWdleCBjaGFyYWN0ZXJzIGZyb20gYSBzdHJpbmcgc28gdGhhdCB0aGV5IGRvbid0CiAgICAgKiBhZmZlY3Qgc2VhcmNoIHJlc3VsdHMKICAgICAqIAogICAgICogQHBhcmFtIHN0cmluZwogICAgICogQHJldHVybnMgU3RyaW5nCiAgICAgKi8KICAgIGVzY2FwZVJlZ0V4cDogZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykgewogICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpOwogICAgfSwKCiAgICAvKioKICAgICAqIEFkZCBhIHRhZyB3aGV0aGVyIGZyb20gdXNlciBpbnB1dCBvciBmcm9tIHNlYXJjaCByZXN1bHRzICh0eXBlYWhlYWQpCiAgICAgKiAKICAgICAqIEBwYXJhbSBpZ25vcmVTZWFyY2hSZXN1bHRzCiAgICAgKiBAcmV0dXJucyB2b2lkCiAgICAgKi8KICAgIHRhZ0Zyb21JbnB1dDogZnVuY3Rpb24gdGFnRnJvbUlucHV0KCkgewogICAgICB2YXIgaWdub3JlU2VhcmNoUmVzdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7CgogICAgICAvLyBJZiB3ZSdyZSBjaG9vc2luZyBhIHRhZyBmcm9tIHRoZSBzZWFyY2ggcmVzdWx0cwogICAgICBpZiAodGhpcy5zZWFyY2hSZXN1bHRzLmxlbmd0aCAmJiB0aGlzLnNlYXJjaFNlbGVjdGlvbiA+PSAwICYmICFpZ25vcmVTZWFyY2hSZXN1bHRzKSB7CiAgICAgICAgdGhpcy50YWdGcm9tU2VhcmNoKHRoaXMuc2VhcmNoUmVzdWx0c1t0aGlzLnNlYXJjaFNlbGVjdGlvbl0pOwogICAgICAgIHRoaXMuaW5wdXQgPSAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJZiB3ZSdyZSBhZGRpbmcgYW4gdW5leGlzdGluZyB0YWcKICAgICAgICB2YXIgdGV4dCA9IHRoaXMuaW5wdXQudHJpbSgpOyAvLyBJZiB0aGUgbmV3IHRhZyBpcyBub3QgYW4gZW1wdHkgc3RyaW5nIGFuZCBwYXNzZXMgdmFsaWRhdGlvbgoKICAgICAgICBpZiAoIXRoaXMub25seUV4aXN0aW5nVGFncyAmJiB0ZXh0Lmxlbmd0aCAmJiB0aGlzLnZhbGlkYXRlKHRleHQpKSB7CiAgICAgICAgICB0aGlzLmlucHV0ID0gJyc7IC8vIERldGVybWluZSBpZiB0aGUgaW5wdXR0ZWQgdGFnIGV4aXN0cyBpbiB0aGUgZXhpc3RpbmdUYWdzCiAgICAgICAgICAvLyBhcnJheQoKICAgICAgICAgIHZhciBuZXdUYWcgPSB7CiAgICAgICAgICAgIGtleTogJycsCiAgICAgICAgICAgIHZhbHVlOiB0ZXh0CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHNlYXJjaFF1ZXJ5ID0gdGhpcy5lc2NhcGVSZWdFeHAodGhpcy5jYXNlU2Vuc2l0aXZlVGFncyA/IG5ld1RhZy52YWx1ZSA6IG5ld1RhZy52YWx1ZS50b0xvd2VyQ2FzZSgpKTsKCiAgICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5leGlzdGluZ1RhZ3MpLAogICAgICAgICAgICAgIF9zdGVwOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgdmFyIHRhZyA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgIHZhciBjb21wYXJlYWJsZSA9IHRoaXMuY2FzZVNlbnNpdGl2ZVRhZ3MgPyB0YWcudmFsdWUgOiB0YWcudmFsdWUudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgICAgICAgaWYgKHNlYXJjaFF1ZXJ5ID09PSBjb21wYXJlYWJsZSkgewogICAgICAgICAgICAgICAgbmV3VGFnID0gT2JqZWN0LmFzc2lnbih7fSwgdGFnKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuYWRkVGFnKG5ld1RhZyk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQWRkIGEgdGFnIGZyb20gc2VhcmNoIHJlc3VsdHMgd2hlbiBhIHVzZXIgY2xpY2tzIG9uIGl0CiAgICAgKiAKICAgICAqIEBwYXJhbSB0YWcKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgdGFnRnJvbVNlYXJjaE9uQ2xpY2s6IGZ1bmN0aW9uIHRhZ0Zyb21TZWFyY2hPbkNsaWNrKHRhZykgewogICAgICB0aGlzLnRhZ0Zyb21TZWFyY2godGFnKTsKICAgICAgdGhpcy4kcmVmc1sndGFnaW5wdXQnXS5ibHVyKCk7CiAgICB9LAoKICAgIC8qKgogICAgICogQWRkIHRoZSBzZWxlY3RlZCB0YWcgZnJvbSB0aGUgc2VhcmNoIHJlc3VsdHMuCiAgICAgKiBDbGVhciBzZWFyY2ggcmVzdWx0cy4KICAgICAqIENsZWFyIHVzZXIgaW5wdXQuCiAgICAgKiAKICAgICAqIEBwYXJhbSB0YWcKICAgICAqIEByZXR1cm4gdm9pZAogICAgICovCiAgICB0YWdGcm9tU2VhcmNoOiBmdW5jdGlvbiB0YWdGcm9tU2VhcmNoKHRhZykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuY2xlYXJTZWFyY2hSZXN1bHRzKCk7CiAgICAgIHRoaXMuYWRkVGFnKHRhZyk7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuaW5wdXQgPSAnJzsKICAgICAgICBfdGhpczIub2xkSW5wdXQgPSAnJzsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQWRkL1NlbGVjdCBhIHRhZwogICAgICogCiAgICAgKiBAcGFyYW0gdGFnCiAgICAgKiBAcmV0dXJucyB2b2lkIHwgQm9vbGVhbgogICAgICovCiAgICBhZGRUYWc6IGZ1bmN0aW9uIGFkZFRhZyh0YWcpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuYmVmb3JlQWRkaW5nVGFnKHRhZykpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQKCgogICAgICBpZiAodGhpcy5saW1pdCA+IDAgJiYgdGhpcy50YWdzLmxlbmd0aCA+PSB0aGlzLmxpbWl0KSB7CiAgICAgICAgdGhpcy4kZW1pdCgnbGltaXQtcmVhY2hlZCcpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSAvLyBBdHRhY2ggdGhlIHRhZyBpZiBpdCBoYXNuJ3QgYmVlbiBhdHRhY2hlZCB5ZXQKCgogICAgICBpZiAoIXRoaXMudGFnU2VsZWN0ZWQodGFnKSkgewogICAgICAgIHRoaXMudGFncy5wdXNoKHRhZyk7IC8vIEVtaXQgZXZlbnRzCgogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMy4kZW1pdCgndGFnLWFkZGVkJywgdGFnKTsKCiAgICAgICAgICBfdGhpczMuJGVtaXQoJ3RhZ3MtdXBkYXRlZCcpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoZSBsYXN0IHRhZyBpbiB0aGUgdGFncyBhcnJheS4KICAgICAqIAogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICByZW1vdmVMYXN0VGFnOiBmdW5jdGlvbiByZW1vdmVMYXN0VGFnKCkgewogICAgICBpZiAoIXRoaXMuaW5wdXQubGVuZ3RoICYmIHRoaXMuZGVsZXRlT25CYWNrc3BhY2UgJiYgdGhpcy50YWdzLmxlbmd0aCkgewogICAgICAgIHRoaXMucmVtb3ZlVGFnKHRoaXMudGFncy5sZW5ndGggLSAxKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFJlbW92ZSB0aGUgc2VsZWN0ZWQgdGFnIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguCiAgICAgKiAKICAgICAqIEBwYXJhbSBpbmRleAogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICByZW1vdmVUYWc6IGZ1bmN0aW9uIHJlbW92ZVRhZyhpbmRleCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbaW5kZXhdOwoKICAgICAgaWYgKCF0aGlzLmJlZm9yZVJlbW92aW5nVGFnKHRhZykpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMudGFncy5zcGxpY2UoaW5kZXgsIDEpOyAvLyBFbWl0IGV2ZW50cwoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC4kZW1pdCgndGFnLXJlbW92ZWQnLCB0YWcpOwoKICAgICAgICBfdGhpczQuJGVtaXQoJ3RhZ3MtdXBkYXRlZCcpOwoKICAgICAgICBpZiAoX3RoaXM0LnR5cGVhaGVhZEFsd2F5c1Nob3cpIHsKICAgICAgICAgIF90aGlzNC5zZWFyY2hUYWcoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIFNlYXJjaCB0aGUgY3VycmVudGx5IGVudGVyZWQgdGV4dCBpbiB0aGUgbGlzdCBvZiBleGlzdGluZyB0YWdzCiAgICAgKiAKICAgICAqIEByZXR1cm5zIHZvaWQgfCBCb29sZWFuCiAgICAgKi8KICAgIHNlYXJjaFRhZzogZnVuY3Rpb24gc2VhcmNoVGFnKCkgewogICAgICBpZiAodGhpcy50eXBlYWhlYWQgIT09IHRydWUpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLm9sZElucHV0ICE9IHRoaXMuaW5wdXQgfHwgIXRoaXMuc2VhcmNoUmVzdWx0cy5sZW5ndGggJiYgdGhpcy50eXBlYWhlYWRBY3RpdmF0aW9uVGhyZXNob2xkID09IDAgfHwgdGhpcy50eXBlYWhlYWRBbHdheXNTaG93IHx8IHRoaXMudHlwZWFoZWFkU2hvd09uRm9jdXMpIHsKICAgICAgICB0aGlzLnNlYXJjaFJlc3VsdHMgPSBbXTsKICAgICAgICB0aGlzLnNlYXJjaFNlbGVjdGlvbiA9IDA7CiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dC50cmltKCk7CgogICAgICAgIGlmIChpbnB1dC5sZW5ndGggJiYgaW5wdXQubGVuZ3RoID49IHRoaXMudHlwZWFoZWFkQWN0aXZhdGlvblRocmVzaG9sZCB8fCB0aGlzLnR5cGVhaGVhZEFjdGl2YXRpb25UaHJlc2hvbGQgPT0gMCB8fCB0aGlzLnR5cGVhaGVhZEFsd2F5c1Nob3cpIHsKICAgICAgICAgIC8vIEZpbmQgYWxsIHRoZSBleGlzdGluZyB0YWdzIHdoaWNoIGluY2x1ZGUgdGhlIHNlYXJjaCB0ZXh0CiAgICAgICAgICB2YXIgc2VhcmNoUXVlcnkgPSB0aGlzLmVzY2FwZVJlZ0V4cCh0aGlzLmNhc2VTZW5zaXRpdmVUYWdzID8gaW5wdXQgOiBpbnB1dC50b0xvd2VyQ2FzZSgpKTsgLy8gQUpBWCBzZWFyY2gKCiAgICAgICAgICBpZiAodGhpcy50eXBlYWhlYWRVcmwubGVuZ3RoID4gMCkgewogICAgICAgICAgICB0aGlzLmV4aXN0aW5nVGFncy5zcGxpY2UoKTsKICAgICAgICAgICAgdmFyIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKCiAgICAgICAgICAgIHhodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQgJiYgdGhpcy5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgICAgICB0aGF0LmV4aXN0aW5nVGFncyA9IEpTT04ucGFyc2UoeGh0dHAucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgIHRoYXQuZG9TZWFyY2goc2VhcmNoUXVlcnkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBlbmRwb2ludCA9IHRoaXMudHlwZWFoZWFkVXJsLnJlcGxhY2UoJzpzZWFyY2gnLCBzZWFyY2hRdWVyeSk7CiAgICAgICAgICAgIHhodHRwLm9wZW4oJ0dFVCcsIGVuZHBvaW50LCB0cnVlKTsKICAgICAgICAgICAgeGh0dHAuc2VuZCgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gU2VhcmNoIHRoZSBleGlzdGluZyBjb2xsZWN0aW9uCiAgICAgICAgICAgIHRoaXMuZG9TZWFyY2goc2VhcmNoUXVlcnkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdGhpcy5vbGRJbnB1dCA9IHRoaXMuaW5wdXQ7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBQZXJmb3JtIHRoZSBhY3R1YWwgc2VhcmNoCiAgICAgKiAKICAgICAqIEBwYXJhbSBzdHJpbmcgc2VhcmNoUXVlcnkKICAgICAqIEByZXR1cm4gdm9pZAogICAgICovCiAgICBkb1NlYXJjaDogZnVuY3Rpb24gZG9TZWFyY2goc2VhcmNoUXVlcnkpIHsKICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmV4aXN0aW5nVGFncyksCiAgICAgICAgICBfc3RlcDI7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdGFnID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgdmFyIGNvbXBhcmVhYmxlID0gdGhpcy5jYXNlU2Vuc2l0aXZlVGFncyA/IHRhZy52YWx1ZSA6IHRhZy52YWx1ZS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgIGlmIChjb21wYXJlYWJsZS5zZWFyY2goc2VhcmNoUXVlcnkpID4gLTEgJiYgIXRoaXMudGFnU2VsZWN0ZWQodGFnKSkgewogICAgICAgICAgICB0aGlzLnNlYXJjaFJlc3VsdHMucHVzaCh0YWcpOwogICAgICAgICAgfQogICAgICAgIH0gLy8gU29ydCB0aGUgc2VhcmNoIHJlc3VsdHMgYWxwaGFiZXRpY2FsbHkKCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CgogICAgICBpZiAodGhpcy5zb3J0U2VhcmNoUmVzdWx0cykgewogICAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICBpZiAoYS52YWx1ZSA8IGIudmFsdWUpIHJldHVybiAtMTsKICAgICAgICAgIGlmIChhLnZhbHVlID4gYi52YWx1ZSkgcmV0dXJuIDE7CiAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9KTsKICAgICAgfSAvLyBTaG9ydGVuIFNlYXJjaCByZXN1bHRzIHRvIGRlc2lyZWQgbGVuZ3RoCgoKICAgICAgaWYgKHRoaXMudHlwZWFoZWFkTWF4UmVzdWx0cyA+IDApIHsKICAgICAgICB0aGlzLnNlYXJjaFJlc3VsdHMgPSB0aGlzLnNlYXJjaFJlc3VsdHMuc2xpY2UoMCwgdGhpcy50eXBlYWhlYWRNYXhSZXN1bHRzKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEhpZGUgdGhlIHR5cGVhaGVhZCBpZiB0aGVyZSdzIG5vdGhpbmcgaW50ZXJlZCBpbnRvIHRoZSBpbnB1dCBmaWVsZC4KICAgICAqIAogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICBoaWRlVHlwZWFoZWFkOiBmdW5jdGlvbiBoaWRlVHlwZWFoZWFkKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5pbnB1dC5sZW5ndGgpIHsKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczUuY2xlYXJTZWFyY2hSZXN1bHRzKCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBTZWxlY3QgdGhlIG5leHQgc2VhcmNoIHJlc3VsdCBpbiB0eXBlYWhlYWQuCiAgICAgKiAKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgbmV4dFNlYXJjaFJlc3VsdDogZnVuY3Rpb24gbmV4dFNlYXJjaFJlc3VsdCgpIHsKICAgICAgaWYgKHRoaXMuc2VhcmNoU2VsZWN0aW9uICsgMSA8PSB0aGlzLnNlYXJjaFJlc3VsdHMubGVuZ3RoIC0gMSkgewogICAgICAgIHRoaXMuc2VhcmNoU2VsZWN0aW9uKys7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBTZWxlY3QgdGhlIHByZXZpb3VzIHNlYXJjaCByZXN1bHQgaW4gdHlwZWFoZWFkLgogICAgICogCiAgICAgKiBAcmV0dXJucyB2b2lkCiAgICAgKi8KICAgIHByZXZTZWFyY2hSZXN1bHQ6IGZ1bmN0aW9uIHByZXZTZWFyY2hSZXN1bHQoKSB7CiAgICAgIGlmICh0aGlzLnNlYXJjaFNlbGVjdGlvbiA+IDApIHsKICAgICAgICB0aGlzLnNlYXJjaFNlbGVjdGlvbi0tOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQ2xlYXIvRW1wdHkgdGhlIHNlYXJjaCByZXN1bHRzLgogICAgICogCiAgICAgKiBAcmV1dHJucyB2b2lkCiAgICAgKi8KICAgIGNsZWFyU2VhcmNoUmVzdWx0czogZnVuY3Rpb24gY2xlYXJTZWFyY2hSZXN1bHRzKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHZhciByZXR1cm5Gb2N1cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7CiAgICAgIHRoaXMuc2VhcmNoUmVzdWx0cyA9IFtdOwogICAgICB0aGlzLnNlYXJjaFNlbGVjdGlvbiA9IDA7CgogICAgICBpZiAodGhpcy50eXBlYWhlYWRBbHdheXNTaG93KSB7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM2LnNlYXJjaFRhZygpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAocmV0dXJuRm9jdXMpIHsKICAgICAgICB0aGlzLiRyZWZzWyd0YWdpbnB1dCddLmZvY3VzKCk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBDbGVhciB0aGUgbGlzdCBvZiBzZWxlY3RlZCB0YWdzLgogICAgICogCiAgICAgKiBAcmV0dXJucyB2b2lkCiAgICAgKi8KICAgIGNsZWFyVGFnczogZnVuY3Rpb24gY2xlYXJUYWdzKCkgewogICAgICB0aGlzLnRhZ3Muc3BsaWNlKDAsIHRoaXMudGFncy5sZW5ndGgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlcGxhY2UgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWdzIHdpdGggdGhlIHRhZ3MgZnJvbSB0aGUgdmFsdWUuCiAgICAgKiAKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgdGFnc0Zyb21WYWx1ZTogZnVuY3Rpb24gdGFnc0Zyb21WYWx1ZSgpIHsKICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZS5sZW5ndGgpIHsKICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1ZvZXJybyBUYWdzIElucHV0OiB0aGUgdi1tb2RlbCB2YWx1ZSBtdXN0IGJlIGFuIGFycmF5IScpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHRhZ3MgPSB0aGlzLnZhbHVlOyAvLyBEb24ndCB1cGRhdGUgaWYgbm90aGluZyBoYXMgY2hhbmdlZAoKICAgICAgICBpZiAodGhpcy50YWdzID09IHRhZ3MpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuY2xlYXJUYWdzKCk7CgogICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGFncyksCiAgICAgICAgICAgIF9zdGVwMzsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciB0YWcgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgIHRoaXMuYWRkVGFnKHRhZyk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnRhZ3MubGVuZ3RoID09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuY2xlYXJUYWdzKCk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbHJlYWR5IHNlbGVjdGVkLgogICAgICogCiAgICAgKiBAcGFyYW0gdGFnCiAgICAgKiBAcmV0dXJucyBCb29sZWFuCiAgICAgKi8KICAgIHRhZ1NlbGVjdGVkOiBmdW5jdGlvbiB0YWdTZWxlY3RlZCh0YWcpIHsKICAgICAgaWYgKHRoaXMuYWxsb3dEdXBsaWNhdGVzKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBpZiAoIXRhZykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIHNlYXJjaFF1ZXJ5ID0gdGhpcy5lc2NhcGVSZWdFeHAodGhpcy5jYXNlU2Vuc2l0aXZlVGFncyA/IHRhZy52YWx1ZSA6IHRhZy52YWx1ZS50b0xvd2VyQ2FzZSgpKTsKCiAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy50YWdzKSwKICAgICAgICAgIF9zdGVwNDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBzZWxlY3RlZFRhZyA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgIHZhciBjb21wYXJlYWJsZSA9IHRoaXMuY2FzZVNlbnNpdGl2ZVRhZ3MgPyBzZWxlY3RlZFRhZy52YWx1ZSA6IHNlbGVjdGVkVGFnLnZhbHVlLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgaWYgKHNlbGVjdGVkVGFnLmtleSA9PT0gdGFnLmtleSAmJiB0aGlzLmVzY2FwZVJlZ0V4cChjb21wYXJlYWJsZSkubGVuZ3RoID09IHNlYXJjaFF1ZXJ5Lmxlbmd0aCAmJiBjb21wYXJlYWJsZS5zZWFyY2goc2VhcmNoUXVlcnkpID4gLTEpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKCiAgICAvKioKICAgICAqIENsZWFyIHRoZSBpbnB1dC4KICAgICAqIAogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICBjbGVhcklucHV0OiBmdW5jdGlvbiBjbGVhcklucHV0KCkgewogICAgICB0aGlzLmlucHV0ID0gJyc7CiAgICB9LAoKICAgIC8qKgogICAgICogUHJvY2VzcyBhbGwgdGhlIGtleXVwIGV2ZW50cy4KICAgICAqIAogICAgICogQHBhcmFtIGUKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgb25LZXlVcDogZnVuY3Rpb24gb25LZXlVcChlKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2tleXVwJywgZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUHJvY2VzcyBhbGwgdGhlIGtleWRvd24gZXZlbnRzLgogICAgICogCiAgICAgKiBAcGFyYW0gZQogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2tleWRvd24nLCBlKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBQcm9jZXNzIHRoZSBvbmZvY3VzIGV2ZW50LgogICAgICogCiAgICAgKiBAcGFyYW0gZQogICAgICogQHJldHVybnMgdm9pZAogICAgICovCiAgICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKGUpIHsKICAgICAgdGhpcy4kZW1pdCgnZm9jdXMnLCBlKTsKICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUHJvY2VzcyB0aGUgb25DbGljayBldmVudC4KICAgICAqIAogICAgICogQHBhcmFtIGUKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrJywgZSk7CiAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlOwogICAgICB0aGlzLnNlYXJjaFRhZygpOwogICAgfSwKCiAgICAvKioKICAgICAqIFByb2Nlc3MgdGhlIG9uYmx1ciBldmVudC4KICAgICAqIAogICAgICogQHBhcmFtIGUKICAgICAqIEByZXR1cm5zIHZvaWQKICAgICAqLwogICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoZSkgewogICAgICB0aGlzLiRlbWl0KCdibHVyJywgZSk7CgogICAgICBpZiAodGhpcy5hZGRUYWdzT25CbHVyKSB7CiAgICAgICAgLy8gQWRkIHRoZSBpbnB1dGVkIHRhZwogICAgICAgIHRoaXMudGFnRnJvbUlucHV0KHRydWUpOwogICAgICB9CgogICAgICBpZiAoIXRoaXMudHlwZWFoZWFkQWx3YXlzU2hvdykgewogICAgICAgIHRoaXMuaGlkZVR5cGVhaGVhZCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2VhcmNoVGFnKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["VoerroTagsInput.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"tags-input-root\" style=\"position: relative;\">\n        <div :class=\"{\n            [wrapperClass + ' tags-input']: true,\n            'active': isActive,\n        }\">\n            <span class=\"tags-input-badge tags-input-badge-pill tags-input-badge-selected-default\"\n                v-for=\"(tag, index) in tags\"\n                :key=\"index\"\n            >\n                <span v-html=\"tag.value\"></span>\n\n                <a href=\"#\"\n                    class=\"tags-input-remove\"\n                    @click.prevent=\"removeTag(index)\"></a>\n            </span>\n\n            <input type=\"text\"\n                ref=\"taginput\"\n                :placeholder=\"placeholder\"\n                v-model=\"input\"\n                v-show=\"!hideInputField\"\n                @keydown.enter.prevent=\"tagFromInput(false)\"\n                @keydown.8=\"removeLastTag\"\n                @keydown.down=\"nextSearchResult\"\n                @keydown.up=\"prevSearchResult\"\n                @keydown=\"onKeyDown\"\n                @keyup=\"onKeyUp\"\n                @keyup.esc=\"clearSearchResults\"\n                @focus=\"onFocus\"\n                @click=\"onClick\"\n                @blur=\"onBlur\"\n                @value=\"tags\">\n\n            <input type=\"hidden\" v-if=\"elementId\"\n                :name=\"elementId\"\n                :id=\"elementId\"\n                v-model=\"hiddenInput\">\n        </div>\n\n        <!-- Typeahead/Autocomplete -->\n        <div v-show=\"searchResults.length\">\n            <p v-if=\"typeaheadStyle === 'badges'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <span v-if=\"!typeaheadHideDiscard\" class=\"tags-input-badge typeahead-hide-btn tags-input-typeahead-item-default\"\n                    @click.prevent=\"clearSearchResults(true)\"\n                    v-text=\"discardSearchText\"></span>\n\n                <span v-for=\"(tag, index) in searchResults\"\n                    :key=\"index\"\n                    v-html=\"tag.value\"\n                    @mouseover=\"searchSelection = index\"\n                    @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                    class=\"tags-input-badge\"\n                    v-bind:class=\"{\n                        'tags-input-typeahead-item-default': index != searchSelection,\n                        'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                    }\"></span>\n            </p>\n\n            <ul v-else-if=\"typeaheadStyle === 'dropdown'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <li v-if=\"!typeaheadHideDiscard\" class=\"tags-input-typeahead-item-default typeahead-hide-btn\"\n                    @click.prevent=\"clearSearchResults(true)\"\n                    v-text=\"discardSearchText\"></li>\n\n                <li v-for=\"(tag, index) in searchResults\"\n                :key=\"index\"\n                v-html=\"tag.value\"\n                @mouseover=\"searchSelection = index\"\n                @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                v-bind:class=\"{\n                    'tags-input-typeahead-item-default': index != searchSelection,\n                    'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                }\"></li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        elementId: String,\n\n        existingTags: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        value: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        typeahead: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadStyle: {\n            type: String,\n            default: 'badges'\n        },\n\n        typeaheadActivationThreshold: {\n            type: Number,\n            default: 1\n        },\n\n        typeaheadMaxResults: {\n            type: Number,\n            default: 0\n        },\n\n        typeaheadAlwaysShow: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadShowOnFocus: {\n            type: Boolean,\n            default: true\n        },\n\n        typeaheadHideDiscard: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadUrl: {\n            type: String,\n            default: ''\n        },\n\n        placeholder: {\n            type: String,\n            default: 'Add a tag'\n        },\n        \n        discardSearchText: {\n            type: String,\n            default: 'Discard Search Results'\n        },\n\n        limit: {\n            type: Number,\n            default: 0\n        },\n\n        hideInputOnLimit: {\n            type: Boolean,\n            default: false\n        },\n\n        onlyExistingTags: {\n            type: Boolean,\n            default: false\n        },\n\n        deleteOnBackspace: {\n            type: Boolean,\n            default: true\n        },\n\n        allowDuplicates: {\n            type: Boolean,\n            default: false\n        },\n        \n        validate: {\n            type: Function,\n            default: () => true\n        },\n\n        addTagsOnComma: {\n            type: Boolean,\n            default: false\n        },\n\n        addTagsOnSpace: {\n            type: Boolean,\n            default: false\n        },\n\n        addTagsOnBlur: {\n            type: Boolean,\n            default: false\n        },\n\n        wrapperClass: {\n            type: String,\n            default: 'tags-input-wrapper-default'\n        },\n\n        sortSearchResults: {\n            type: Boolean,\n            default: true\n        },\n\n        caseSensitiveTags: {\n            type: Boolean,\n            default: false\n        },\n\n        beforeAddingTag: {\n            type: Function,\n            default: () => true\n        },\n\n        beforeRemovingTag: {\n            type: Function,\n            default: () => true\n        },\n    },\n\n    data() {\n        return {\n            badgeId: 0,\n            tags: [],\n\n            input: '',\n            oldInput: '',\n            hiddenInput: '',\n\n            searchResults: [],\n            searchSelection: 0,\n\n            selectedTag: -1,\n\n            isActive: false,\n        };\n    },\n\n    created () {\n        this.tagsFromValue();\n\n        if (this.typeaheadAlwaysShow) {\n            this.searchTag(false);\n        }\n    },\n\n    mounted () {\n        // Emit an event\n        this.$emit('initialized');\n        \n        document.addEventListener('click', (e) => {\n            if (e.target !== this.$refs['taginput']) {\n                this.clearSearchResults();\n            }\n        });\n    },\n\n    computed: {\n        hideInputField() {\n            return (this.hideInputOnLimit && this.limit > 0 && this.tags.length >= this.limit);\n        }\n    },\n\n    watch: {\n        input(newVal, oldVal) {\n            this.searchTag(false);\n\n            if (newVal.length && newVal != oldVal) {\n                const diff = newVal.substring(oldVal.length, newVal.length);\n\n                if (this.addTagsOnSpace) {\n                    if (newVal.endsWith(' ')) {\n                        // The space shouldn't actually be inserted\n                        this.input = newVal.trim();\n\n                        // Add the inputed tag\n                        this.tagFromInput(true);\n                    }\n                }\n\n                if (this.addTagsOnComma) {\n                    newVal = newVal.trim();\n\n                    if (newVal.endsWith(',')) {\n                        // The comma shouldn't actually be inserted\n                        this.input = newVal.substring(0, newVal.length - 1);\n\n                        // Add the inputed tag\n                        this.tagFromInput(true);\n                    }\n                }\n\n                this.$emit('change', newVal);\n            }\n        },\n\n        tags() {\n            // Updating the hidden input\n            this.hiddenInput = JSON.stringify(this.tags);\n\n            // Update the bound v-model value\n            this.$emit('input', this.tags);\n        },\n\n        value() {\n            this.tagsFromValue();\n        },\n\n        typeaheadAlwaysShow(newValue) {\n            if (newValue) {\n                this.searchTag(false);\n            } else {\n                this.clearSearchResults();\n            }\n        },\n    },\n\n    methods: {\n        /**\n         * Remove reserved regex characters from a string so that they don't\n         * affect search results\n         * \n         * @param string\n         * @returns String\n         */\n        escapeRegExp(string) {\n            return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        },\n\n        /**\n         * Add a tag whether from user input or from search results (typeahead)\n         * \n         * @param ignoreSearchResults\n         * @returns void\n         */\n        tagFromInput(ignoreSearchResults = false) {\n            // If we're choosing a tag from the search results\n            if (this.searchResults.length && this.searchSelection >= 0 && !ignoreSearchResults) {\n                this.tagFromSearch(this.searchResults[this.searchSelection]);\n\n                this.input = '';\n            } else {\n                // If we're adding an unexisting tag\n                let text = this.input.trim();\n\n                // If the new tag is not an empty string and passes validation\n                if (!this.onlyExistingTags && text.length && this.validate(text)) {\n                    this.input = '';\n\n                    // Determine if the inputted tag exists in the existingTags\n                    // array\n                    let newTag = {\n                        key: '',\n                        value: text,\n                    };\n\n                    const searchQuery = this.escapeRegExp(\n                        this.caseSensitiveTags\n                            ? newTag.value\n                            : newTag.value.toLowerCase()\n                    );\n\n                    for (let tag of this.existingTags) {\n                        const compareable = this.caseSensitiveTags\n                            ? tag.value\n                            : tag.value.toLowerCase();\n\n                        if (searchQuery === compareable) {\n                            newTag = Object.assign({}, tag);\n\n                            break;\n                        }\n                    }\n\n                    this.addTag(newTag);\n                }\n            }\n        },\n\n        /**\n         * Add a tag from search results when a user clicks on it\n         * \n         * @param tag\n         * @returns void\n         */\n        tagFromSearchOnClick(tag) {\n            this.tagFromSearch(tag);\n\n            this.$refs['taginput'].blur();\n        },\n\n        /**\n         * Add the selected tag from the search results.\n         * Clear search results.\n         * Clear user input.\n         * \n         * @param tag\n         * @return void\n         */\n        tagFromSearch(tag) {\n            this.clearSearchResults();\n            this.addTag(tag);\n\n            this.$nextTick(() => {\n                this.input = '';\n                this.oldInput = '';\n            });\n        },\n\n        /**\n         * Add/Select a tag\n         * \n         * @param tag\n         * @returns void | Boolean\n         */\n        addTag(tag) {\n            if (!this.beforeAddingTag(tag)) {\n                return false;\n            }\n\n            // Check if the limit has been reached\n            if (this.limit > 0 && this.tags.length >= this.limit) {\n                this.$emit('limit-reached');\n\n                return false;\n            }\n\n            // Attach the tag if it hasn't been attached yet\n            if (!this.tagSelected(tag)) {\n                this.tags.push(tag);\n\n                // Emit events\n                this.$nextTick(() => {\n                    this.$emit('tag-added', tag);\n                    this.$emit('tags-updated');\n                });\n            }\n        },\n\n        /**\n         * Remove the last tag in the tags array.\n         * \n         * @returns void\n         */\n        removeLastTag() {\n            if (!this.input.length && this.deleteOnBackspace && this.tags.length) {\n                this.removeTag(this.tags.length - 1);\n            }\n        },\n\n        /**\n         * Remove the selected tag at the specified index.\n         * \n         * @param index\n         * @returns void\n         */\n        removeTag(index) {\n            let tag = this.tags[index];\n\n            if (!this.beforeRemovingTag(tag)) {\n                return false;\n            }\n\n            this.tags.splice(index, 1);\n\n            // Emit events\n            this.$nextTick(() => {\n                this.$emit('tag-removed', tag);\n                this.$emit('tags-updated');\n\n                if (this.typeaheadAlwaysShow) {\n                    this.searchTag();\n                }\n            });\n        },\n\n        /**\n         * Search the currently entered text in the list of existing tags\n         * \n         * @returns void | Boolean\n         */\n        searchTag() {\n            if (this.typeahead !== true) {\n                return false;\n            }\n\n            if (this.oldInput != this.input || (!this.searchResults.length && this.typeaheadActivationThreshold == 0) || this.typeaheadAlwaysShow || this.typeaheadShowOnFocus) {\n                this.searchResults = [];\n                this.searchSelection = 0;\n                let input = this.input.trim();\n\n                if ((input.length && input.length >= this.typeaheadActivationThreshold) || this.typeaheadActivationThreshold == 0 || this.typeaheadAlwaysShow) {\n                    // Find all the existing tags which include the search text\n                    const searchQuery = this.escapeRegExp(\n                        this.caseSensitiveTags ? input : input.toLowerCase()\n                    );\n\n                    // AJAX search\n                    if (this.typeaheadUrl.length > 0) {\n                        this.existingTags.splice();\n                        const xhttp = new XMLHttpRequest();\n                        const that = this;\n\n                        xhttp.onreadystatechange = function () {\n                            if (this.readyState == 4 && this.status == 200) {\n                                that.existingTags = JSON.parse(xhttp.responseText);\n\n                                that.doSearch(searchQuery);\n                            }\n                        }\n\n                        const endpoint = this.typeaheadUrl.replace(':search', searchQuery);\n                        xhttp.open('GET', endpoint, true);\n                        xhttp.send();\n                    } else {\n                        // Search the existing collection\n                        this.doSearch(searchQuery);\n                    }\n                }\n\n                this.oldInput = this.input;\n            }\n        },\n\n        /**\n         * Perform the actual search\n         * \n         * @param string searchQuery\n         * @return void\n         */\n        doSearch(searchQuery) {\n            for (let tag of this.existingTags) {\n                const compareable = this.caseSensitiveTags\n                    ? tag.value\n                    : tag.value.toLowerCase();\n\n                if (compareable.search(searchQuery) > -1 && ! this.tagSelected(tag)) {\n                    this.searchResults.push(tag);\n                }\n            }\n\n            // Sort the search results alphabetically\n            if (this.sortSearchResults) {\n                this.searchResults.sort((a, b) => {\n                    if (a.value < b.value) return -1;\n                    if (a.value > b.value) return 1;\n\n                    return 0;\n                });\n            }\n\n            // Shorten Search results to desired length\n            if (this.typeaheadMaxResults > 0) {\n                this.searchResults = this.searchResults.slice(\n                    0,\n                    this.typeaheadMaxResults\n                );\n            }\n        },\n\n        /**\n         * Hide the typeahead if there's nothing intered into the input field.\n         * \n         * @returns void\n         */\n        hideTypeahead() {\n            if (! this.input.length) {\n                this.$nextTick(() => {\n                    this.clearSearchResults();\n                });\n            }\n        },\n\n        /**\n         * Select the next search result in typeahead.\n         * \n         * @returns void\n         */\n        nextSearchResult() {\n            if (this.searchSelection + 1 <= this.searchResults.length - 1) {\n                this.searchSelection++;\n            }\n        },\n\n        /**\n         * Select the previous search result in typeahead.\n         * \n         * @returns void\n         */\n        prevSearchResult() {\n            if (this.searchSelection > 0) {\n                this.searchSelection--;\n            }\n        },\n\n        /**\n         * Clear/Empty the search results.\n         * \n         * @reutrns void\n         */\n        clearSearchResults(returnFocus = false) {\n            this.searchResults = [];\n            this.searchSelection = 0;\n\n            if (this.typeaheadAlwaysShow) {\n                this.$nextTick(() => {\n                    this.searchTag();\n                });\n            }\n\n            if (returnFocus) {\n                this.$refs['taginput'].focus();\n            }\n        },\n\n        /**\n         * Clear the list of selected tags.\n         * \n         * @returns void\n         */\n        clearTags() {\n            this.tags.splice(0, this.tags.length);\n        },\n\n        /**\n         * Replace the currently selected tags with the tags from the value.\n         * \n         * @returns void\n         */\n        tagsFromValue() {\n            if (this.value && this.value.length) {\n                if (!Array.isArray(this.value)) {\n                    console.error('Voerro Tags Input: the v-model value must be an array!');\n\n                    return;\n                }\n                \n                let tags = this.value;\n\n                // Don't update if nothing has changed\n                if (this.tags == tags) {\n                    return;\n                }\n\n                this.clearTags();\n\n                for (let tag of tags) {\n                    this.addTag(tag);\n                }\n            } else {\n                if (this.tags.length == 0) {\n                    return;\n                }\n\n                this.clearTags();\n            }\n        },\n\n        /**\n         * Check if a tag is already selected.\n         * \n         * @param tag\n         * @returns Boolean\n         */\n        tagSelected(tag) {\n            if (this.allowDuplicates) {\n                return false;\n            }\n\n            if (! tag) {\n                return false;\n            }\n\n            const searchQuery = this.escapeRegExp(\n                this.caseSensitiveTags ? tag.value : tag.value.toLowerCase()\n            );\n\n            for (let selectedTag of this.tags) {\n                const compareable = this.caseSensitiveTags\n                    ? selectedTag.value\n                    : selectedTag.value.toLowerCase();\n\n                if (selectedTag.key === tag.key && this.escapeRegExp(compareable).length == searchQuery.length && compareable.search(searchQuery) > -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Clear the input.\n         * \n         * @returns void\n         */\n        clearInput() {\n            this.input = '';\n        },\n\n        /**\n         * Process all the keyup events.\n         * \n         * @param e\n         * @returns void\n         */\n        onKeyUp(e) {\n            this.$emit('keyup', e);\n        },\n\n        /**\n         * Process all the keydown events.\n         * \n         * @param e\n         * @returns void\n         */\n        onKeyDown(e) {\n            this.$emit('keydown', e);\n        },\n\n        /**\n         * Process the onfocus event.\n         * \n         * @param e\n         * @returns void\n         */\n        onFocus(e) {\n            this.$emit('focus', e);\n\n            this.isActive = true;\n        },\n\n        /**\n         * Process the onClick event.\n         * \n         * @param e\n         * @returns void\n         */\n        onClick(e) {\n            this.$emit('click', e);\n\n            this.isActive = true;\n\n            this.searchTag();\n        },\n\n        /**\n         * Process the onblur event.\n         * \n         * @param e\n         * @returns void\n         */\n        onBlur(e) {\n            this.$emit('blur', e)\n\n            if (this.addTagsOnBlur) {\n                // Add the inputed tag\n                this.tagFromInput(true);\n            }\n\n            if (!this.typeaheadAlwaysShow) {\n                this.hideTypeahead();\n            } else {\n                this.searchTag();\n            }\n\n            this.isActive = false;\n        },\n    }\n}\n</script>\n"],"sourceRoot":"node_modules/@voerro/vue-tagsinput/src"}]}